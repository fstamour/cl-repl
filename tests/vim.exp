#!/nix/store/35lk97sykp1d6picrf9q2krs8n9w3xna-expect-5.45.4/bin/expect -f
#
# This Expect script was generated by autoexpect on Wed Nov 20 22:25:35 2019
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn ./cl-repl
match_max 100000

# Send (cl-repl::edit-file "cl-repl.asd")
expect -exact "\[2K\r\[38;5;2mCL-USER> \[0m\[0D\[1C"
send -- "("
expect -exact "\[2K\r\[38;5;2mCL-USER> \[0m(\[0D\[1C"
send -- "c"
expect -exact "\[2K\r\[38;5;2mCL-USER> \[0m(c\[0D\[1C"
send -- "l"
expect -exact "\[2K\r\[38;5;2mCL-USER> \[0m(cl\[0D\[1C"
send -- "-"
expect -exact "\[2K\r\[38;5;2mCL-USER> \[0m(cl-\[0D\[1C"
send -- "r"
expect -exact "\[2K\r\[38;5;2mCL-USER> \[0m(cl-r\[0D\[1C"
send -- "e"
expect -exact "\[2K\r\[38;5;2mCL-USER> \[0m(cl-re\[0D\[1C"
send -- "p"
expect -exact "\[2K\r\[38;5;2mCL-USER> \[0m(cl-rep\[0D\[1C"
send -- "l"
expect -exact "\[2K\r\[38;5;2mCL-USER> \[0m(cl-repl\[0D\[1C"
send -- ":"
expect -exact "\[2K\r\[38;5;2mCL-USER> \[0m(cl-repl:\[0D\[1C"
send -- ":"
expect -exact "\[2K\r\[38;5;2mCL-USER> \[0m(cl-repl::\[0D\[1C"
send -- "e"
expect -exact "\[2K\r\[38;5;2mCL-USER> \[0m(cl-repl::e\[0D\[1C"
send -- "d"
expect -exact "\[2K\r\[38;5;2mCL-USER> \[0m(cl-repl::ed\[0D\[1C"
send -- "i"
expect -exact "\[2K\r\[38;5;2mCL-USER> \[0m(cl-repl::edi\[0D\[1C"
send -- "t"
expect -exact "\[2K\r\[38;5;2mCL-USER> \[0m(cl-repl::edit\[0D\[1C"
send -- "-"
expect -exact "\[2K\r\[38;5;2mCL-USER> \[0m(cl-repl::edit-\[0D\[1C"
send -- "f"
expect -exact "\[2K\r\[38;5;2mCL-USER> \[0m(cl-repl::edit-f\[0D\[1C"
send -- "i"
expect -exact "\[2K\r\[38;5;2mCL-USER> \[0m(cl-repl::edit-fi\[0D\[1C"
send -- "l"
expect -exact "\[2K\r\[38;5;2mCL-USER> \[0m(cl-repl::edit-fil\[0D\[1C"
send -- "e"
expect -exact "\[2K\r\[38;5;2mCL-USER> \[0m(cl-repl::edit-file\[0D\[1C"
send -- " "
expect -exact "\[2K\r\[38;5;2mCL-USER> \[0m(cl-repl::edit-file \[0D\[1C"
send -- "\""
expect -exact "\[2K\r\[38;5;2mCL-USER> \[0m(cl-repl::edit-file \"\[0D\[1C"
send -- "c"
expect -exact "\[2K\r\[38;5;2mCL-USER> \[0m(cl-repl::edit-file \"c\[0D\[1C"
send -- "l"
expect -exact "\[2K\r\[38;5;2mCL-USER> \[0m(cl-repl::edit-file \"cl\[0D\[1C"
send -- "-"
expect -exact "\[2K\r\[38;5;2mCL-USER> \[0m(cl-repl::edit-file \"cl-\[0D\[1C"
send -- "r"
expect -exact "\[2K\r\[38;5;2mCL-USER> \[0m(cl-repl::edit-file \"cl-r\[0D\[1C"
send -- "e"
expect -exact "\[2K\r\[38;5;2mCL-USER> \[0m(cl-repl::edit-file \"cl-re\[0D\[1C"
send -- "p"
expect -exact "\[2K\r\[38;5;2mCL-USER> \[0m(cl-repl::edit-file \"cl-rep\[0D\[1C"
send -- "l"
expect -exact "\[2K\r\[38;5;2mCL-USER> \[0m(cl-repl::edit-file \"cl-repl\[0D\[1C"
send -- "."
expect -exact "\[2K\r\[38;5;2mCL-USER> \[0m(cl-repl::edit-file \"cl-repl.\[0D\[1C"
send -- "a"
expect -exact "\[2K\r\[38;5;2mCL-USER> \[0m(cl-repl::edit-file \"cl-repl.a\[0D\[1C"
send -- "s"
expect -exact "\[2K\r\[38;5;2mCL-USER> \[0m(cl-repl::edit-file \"cl-repl.as\[0D\[1C"
send -- "d"
expect -exact "\[2K\r\[38;5;2mCL-USER> \[0m(cl-repl::edit-file \"cl-repl.asd\[0D\[1C"
send -- "\""
expect -exact "\[2K\r\[38;5;2mCL-USER> \[0m(cl-repl::edit-file \[38;5;11m\"\[0m\[38;5;11mc\[0m\[38;5;11ml\[0m\[38;5;11m-\[0m\[38;5;11mr\[0m\[38;5;11me\[0m\[38;5;11mp\[0m\[38;5;11ml\[0m\[38;5;11m.\[0m\[38;5;11ma\[0m\[38;5;11ms\[0m\[38;5;11md\[0m\[38;5;11m\"\[0m\[0D\[1C"
send -- ")"
expect -exact "\[2K\r\[38;5;2mCL-USER> \[0m(cl-repl::edit-file \[38;5;11m\"\[0m\[38;5;11mc\[0m\[38;5;11ml\[0m\[38;5;11m-\[0m\[38;5;11mr\[0m\[38;5;11me\[0m\[38;5;11mp\[0m\[38;5;11ml\[0m\[38;5;11m.\[0m\[38;5;11ma\[0m\[38;5;11ms\[0m\[38;5;11md\[0m\[38;5;11m\"\[0m)\[0D\[1C"
send -- "\r"

# Quit vim
send -- ":"
expect -exact "\[?25l\[0m\[47;1H\[K\[47;1H:\[34h\[?25h"
send -- "q\r"
expect -exact "q\r"
expect -exact "\[?25l\[47;1H\[K\[47;1H\[?1l>\[34h\[?25h\[?1049l\r
\[38;5;9m\[OUT\]: \[0mNIL NIL 0 \r
\[2K\r\[38;5;2mCL-USER> \[0m\[0D\[1C"

# Quit cl-repl
send -- ""
expect -exact "Do you really want to exit? (y or n) "
send -- "\r"
expect -exact "\r
\r
Please type \"y\" for yes or \"n\" for no.\r
Do you really want to exit? (y or n) "
send -- "y\r"
expect eof
